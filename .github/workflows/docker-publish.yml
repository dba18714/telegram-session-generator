name: Docker Publish

on:
  # 当 release workflow 完成时触发
  workflow_run:
    workflows: ["Release"]
    types:
      - completed
    branches: [main]
  
  # 手动触发，用于测试或紧急发布
  workflow_dispatch:
    inputs:
      version:
        description: 'Version to build (e.g., 1.2.3 or latest)'
        required: true
        default: 'latest'
      push_to_registry:
        description: 'Push to registry'
        type: boolean
        default: true

  # 当有新的 release 标签时触发
  release:
    types: [published]

permissions:
  contents: read
  packages: write

jobs:
  docker-publish:
    runs-on: ubuntu-latest
    # 只有当 release workflow 成功完成时才运行
    if: |
      (github.event_name == 'workflow_run' && github.event.workflow_run.conclusion == 'success') ||
      github.event_name == 'workflow_dispatch' ||
      github.event_name == 'release'
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      
      - name: Log in to Docker Hub
        if: github.event.inputs.push_to_registry != 'false'
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}
      
      - name: Log in to GitHub Container Registry
        if: github.event.inputs.push_to_registry != 'false'
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      
      - name: Get version from package.json
        id: package-version
        run: |
          VERSION=$(node -p "require('./package.json').version")
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "Package version: $VERSION"
      
      - name: Set version for manual dispatch
        id: version
        run: |
          if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
            echo "version=${{ github.event.inputs.version }}" >> $GITHUB_OUTPUT
          elif [ "${{ github.event_name }}" = "release" ]; then
            echo "version=${GITHUB_REF#refs/tags/v}" >> $GITHUB_OUTPUT
          else
            echo "version=${{ steps.package-version.outputs.version }}" >> $GITHUB_OUTPUT
          fi
      
      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: |
            ${{ secrets.DOCKER_USERNAME }}/telegram-session-generator
            ghcr.io/${{ github.repository }}
          tags: |
            type=raw,value=latest,enable={{is_default_branch}}
            type=raw,value=${{ steps.version.outputs.version }}
            type=semver,pattern={{version}},value=${{ steps.version.outputs.version }}
            type=semver,pattern={{major}}.{{minor}},value=${{ steps.version.outputs.version }}
            type=semver,pattern={{major}},value=${{ steps.version.outputs.version }}
            type=ref,event=branch
            type=ref,event=pr
            type=sha,prefix={{branch}}-
      
      - name: Build Docker image (dry run)
        if: github.event.inputs.push_to_registry == 'false'
        uses: docker/build-push-action@v5
        with:
          context: .
          platforms: linux/amd64,linux/arm64
          push: false
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
      
      - name: Build and push Docker image
        id: docker_build
        if: github.event.inputs.push_to_registry != 'false'
        uses: docker/build-push-action@v5
        with:
          context: .
          platforms: linux/amd64,linux/arm64
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
      
      - name: Image digest
        run: echo "Image digest:${{ steps.docker_build.outputs.digest }}"
      
      - name: Test Docker image
        if: github.event.inputs.push_to_registry != 'false'
        run: |
          echo "Testing Docker image..."
          docker run --rm ${{ secrets.DOCKER_USERNAME }}/telegram-session-generator:${{ steps.version.outputs.version }} --help
      
      - name: Update Docker Hub description
        if: github.event.inputs.push_to_registry != 'false'
        uses: peter-evans/dockerhub-description@v4
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}
          repository: ${{ secrets.DOCKER_USERNAME }}/telegram-session-generator
          short-description: "🚀 A secure and easy-to-use CLI tool for generating Telegram session strings"
          readme-filepath: ./README.md